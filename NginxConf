#!/bin/bash 

show_prerequisites() {
    ## Info / prerequisites text
    echo "${orange}Prerequisites:$normal"
    echo "- You need a domain name. https://www.freenom.com/"
    echo "- You need DNS records type A for example like this:"
    echo "  [empty] -> WAN IP"
    echo "  www -> WAN IP"
    echo "  api -> WAN IP"
    echo "  or even better caa records for better security"
    echo "- Port forwarding HTTP and HTTPS on router to server IP"
    echo
}

default_conf() {
    echo "server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root $webroot/public;
    index index.html;
    server_name _;
    location / {
        try_files $uri $uri/ =404;
    }
}" | sudo tee /etc/nginx/sites-available/default
}

nginx_conf() {
    echo "user                 www-data;
pid                  /run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;
events {
    multi_accept       on;
    worker_connections 65535;
}
http {
    charset              utf-8;
    sendfile             on;
    tcp_nopush           on;
    tcp_nodelay          on;
    server_tokens        off;
    log_not_found        off;
    types_hash_max_size  2048;
    client_max_body_size 16M;
    # MIME
    include              mime.types;
    default_type         application/octet-stream;
    # Logging
    access_log           /var/log/nginx/access.log;
    error_log            /var/log/nginx/error.log warn;
    # SSL
    ssl_session_timeout  1d;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_tickets  off;
    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam          /etc/nginx/dhparam.pem;
    ssl_ecdh_curve       secp384r1;
    # Mozilla Intermediate configuration
    ssl_protocols        TLSv1.2 TLSv1.3;
    #ssl_ciphers          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_ciphers          EECDH+AESGCM:EDH+AESGCM;
    # OCSP Stapling
    ssl_stapling         on;
    ssl_stapling_verify  on;
    resolver             1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
    resolver_timeout     2s;
    # Load configs
    include              /etc/nginx/conf.d/*.conf;
    include              /etc/nginx/sites-enabled/*;
}" | sudo tee /etc/nginx/nginx.conf
}

letsencrypt_conf() {
    echo "# ACME-challenge
location ^~ /.well-known/acme-challenge/ {
    root $webroot/_letsencrypt;
}" | sudo tee /etc/nginx/letsencrypt.conf
}

security_conf() {
    echo "# security headers
add_header X-Frame-Options           \"SAMEORIGIN\" always;
add_header X-XSS-Protection          \"1; mode=block\" always;
add_header X-Content-Type-Options    \"nosniff\" always;
add_header Referrer-Policy           \"no-referrer-when-downgrade\" always;
add_header Content-Security-Policy   \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;
add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;
# . files
location ~ /\.(?!well-known) {
    deny all;
}" | sudo tee /etc/nginx/security.conf
}

general_conf() {
    echo "# favicon.ico
location = /favicon.ico {
    log_not_found off;
    access_log    off;
}
# robots.txt
location = /robots.txt {
    log_not_found off;
    access_log    off;
}
# gzip
gzip            on;
gzip_vary       on;
gzip_proxied    any;
gzip_comp_level 6;
gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;" | sudo tee /etc/nginx/general.conf
}

proxy_conf() {
    echo "proxy_http_version                 1.1;
proxy_cache_bypass                 \$http_upgrade;
# Proxy headers
proxy_set_header Upgrade           \$http_upgrade;
proxy_set_header Connection        "upgrade";
proxy_set_header Host              \$host;
proxy_set_header X-Real-IP         \$remote_addr;
proxy_set_header X-Forwarded-For   \$proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Forwarded-Host  \$host;
proxy_set_header X-Forwarded-Port  \$server_port;
# Proxy timeouts
proxy_connect_timeout              60s;
proxy_send_timeout                 60s;
proxy_read_timeout                 60s;" | sudo tee /etc/nginx/proxy.conf
}

domain_conf() {
    echo "# HTTP redirect
server {
    listen      80;
    listen      [::]:80;
    root $webroot/$domain/public;
    index index.html;
    server_name $domain;
    include     letsencrypt.conf;
    location / {
            try_files \$uri \$uri/ =404;
    }
    access_log              /var/log/nginx/$domain.access.log;
    error_log               /var/log/nginx/$domain.error.log warn;
}" | sudo tee /etc/nginx/sites-available/$domain.conf
}

domain_conf_with_proxy() {
    read -p "${green}Enter proxy_pass for $domain (http://127.0.0.1:8080): $normal" proxy_pass
    echo "# HTTP redirect
server {
    listen      80;
    listen      [::]:80;
    server_name $domain;
    include     letsencrypt.conf;
    location / {
        return 301 https://$domain\$request_uri;
    }
}
# HTTPS SERVER
server {
    listen                  443 ssl http2;
    listen                  [::]:443 ssl http2;
    server_name             $domain;
    # SSL
    ssl_certificate         /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/$domain/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$domain/chain.pem;
    # security
    include                 security.conf;
    # logging
    access_log              /var/log/nginx/$domain.access.log;
    error_log               /var/log/nginx/$domain.error.log warn;
    # reverse proxy
    location / {
        proxy_pass $proxy_pass;
        include    proxy.conf;
    }
    # additional config
    include general.conf;
}" | sudo tee /etc/nginx/sites-available/$domain.conf
}

domain_conf_without_proxy() {
    echo "# HTTP redirect
server {
    listen      80;
    listen      [::]:80;
    server_name $domain;
    include     letsencrypt.conf;
    location / {
        return 301 https://$domain\$request_uri;
    }
}
# HTTPS SERVER
server {
    listen                  443 ssl http2;
    listen                  [::]:443 ssl http2;
    root $webroot/$domain/public;
    index index.html;
    server_name             $domain;
    # SSL
    ssl_certificate         /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/$domain/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$domain/chain.pem;
    # security
    include                 security.conf;
    # logging
    access_log              /var/log/nginx/$domain.access.log;
    error_log               /var/log/nginx/$domain.error.log warn;
    location / {
            try_files \$uri \$uri/ =404;
    }
    # additional config
    include general.conf;
 }" | sudo tee /etc/nginx/sites-available/$domain.conf
}
